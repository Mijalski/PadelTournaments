@page "/"
@using BlazorBootstrap
@using PadelTournamentManager.Models.Enums

<!-- Fullscreen, oversized, rotated üéæ background -->
<div class="bg-emoji-fixed" aria-hidden="true"></div>

<div class="container py-4">
<div class="row g-4">
@if (!ShowMatches)
    {
    <div class="col-lg-6">
        <Card Class="h-100 border-0 shadow-sm rounded-4 bg-primary-subtle">
            <CardBody Class="text-center p-4">
                <CardTitle Class="mb-3 fw-semibold text-primary-emphasis">üèÜ Tournament type</CardTitle>

                <div class="d-inline-block text-start">
                    <div class="form-check mb-2">
                        <RadioInput Name="TournamentType" Label="Americano" @bind-Value="IsAmericano"/>
                    </div>
                    <div class="form-check">
                        <RadioInput Name="TournamentType" Label="Mexicano" @bind-Value="IsMexicano"/>
                    </div>
                </div>
            </CardBody>
        </Card>
    </div>

    <!-- Result sorting -->
    <div class="col-lg-6">
        <Card Class="h-100 border-0 shadow-sm rounded-4 bg-info-subtle">
            <CardBody Class="text-center p-4">
                <CardTitle Class="mb-3 fw-semibold text-info-emphasis">üìä Result sorting</CardTitle>

                <div class="d-inline-block text-start">
                    <div class="form-check mb-2">
                        <RadioInput Name="ResultSorting" Label="Points then wins" @bind-Value="IsPointsThenWins"/>
                    </div>
                    <div class="form-check">
                        <RadioInput Name="ResultSorting" Label="Wins then points" @bind-Value="IsWinsThenPoints"/>
                    </div>
                </div>
            </CardBody>
        </Card>
    </div>

    <div class="col-lg-6">
        <Card Class="h-100 border-0 shadow-sm rounded-4 bg-warning-subtle">
            <CardBody Class="text-center p-4">
                <CardTitle Class="mb-3 fw-semibold text-warning-emphasis">üéØ Scoring</CardTitle>

                <div class="d-inline-block text-start" style="min-width:320px; max-width:460px;">

                    <div class="form-check mb-2">
                        <RadioInput Name="ScoringMode"
                                    Label="Play points or games"
                                    @bind-Value="IsPlayPointsOrGames"/>
                    </div>

                    <div class="d-flex align-items-center gap-2">
                        <div class="form-check m-0">
                            <RadioInput Name="ScoringMode"
                                        Label="Play to"
                                        @bind-Value="IsPlayToPoints"/>
                        </div>

                        <InputNumber @bind-Value="Game.ToPoints"
                                     class="form-control form-control-sm w-auto"
                                     min="1" max="99"
                                     disabled="@(!IsPlayToPoints)"/>
                        <span>points</span>
                    </div>
                </div>
            </CardBody>
        </Card>
    </div>


    <div class="col-lg-6">
        <Card Class="h-100 border-0 shadow-sm rounded-4 bg-success-subtle">
            <CardBody Class="text-center p-4">
                <CardTitle Class="mb-3 fw-semibold text-success-emphasis">üë• Team format</CardTitle>

                <div class="d-inline-block text-start">
                    <div class="form-check mb-2">
                        <RadioInput Name="TeamFormat" Label="Individually" @bind-Value="IsIndividual"/>
                    </div>
                    <div class="form-check">
                        <RadioInput Name="TeamFormat" Label="Team" @bind-Value="IsTeam"/>
                    </div>
                </div>
            </CardBody>
        </Card>
    </div>

    <div class="col-lg-6">
        <Card Class="h-100 border-0 shadow-sm rounded-4 bg-light">
            <CardBody Class="text-center p-4">
                <CardTitle class="mb-3 fw-semibold">üéæ Courts</CardTitle>

                <div class="d-flex justify-content-center">
                    <div class="input-group mb-3" style="max-width: 480px;">
                        <TextInput Placeholder="Court name"
                                   @bind-Value="NewCourtName"
                                   OnInput="@((ChangeEventArgs e) => NewCourtName = e?.Value?.ToString())"
                                   @onkeyup="@(e => OnEnterUp(e, AddCourt))"/>
                        <Button Color="ButtonColor.Secondary" Class="px-4" @onclick="AddCourt">ADD</Button>
                    </div>
                </div>

                <ol class="list-unstyled mb-0 d-inline-block text-start w-100" style="max-width: 560px;">
                    @foreach (var c in Game.Courts)
                    {
                        <li @key="c.Order" class="d-flex align-items-center py-2 border-bottom">

                            @if (c.IsEditing)
                            {
                                <div class="flex-grow-1 me-3">
                                    <TextInput Placeholder="Court name"
                                               @bind-Value="c.EditName"
                                               OnInput="@((ChangeEventArgs e) => c.EditName = e?.Value?.ToString())"
                                               @onkeyup="@(e => OnEnterUp(e, () => SaveCourt(c.Order)))"/>
                                </div>

                                <Button Color="ButtonColor.Secondary" Class="me-2"
                                        Title="Save" @onclick="@(() => SaveCourt(c.Order))">
                                    <Icon Name="IconName.Check2"/>
                                </Button>
                                <Button Color="ButtonColor.Link" Class="me-3"
                                        Title="Cancel" @onclick="@(() => CancelEditCourt(c.Order))">
                                    <Icon Name="IconName.XLg"/>
                                </Button>
                            }
                            else
                            {
                                <span class="me-2 fw-medium">@c.Order.</span>
                                <span class="flex-grow-1">@c.Name</span>

                                <Badge Color="BadgeColor.Primary" IndicatorType="BadgeIndicatorType.RoundedPill" Class="me-3">
                                    PADEL
                                </Badge>

                                <Button Color="ButtonColor.Link" Class="me-2"
                                        Title="Edit" @onclick="@(() => EditCourtByOrder(c.Order))">
                                    <Icon Name="IconName.PencilSquare"/>
                                </Button>
                            }

                            <Button Color="ButtonColor.Link" Class="text-danger p-0"
                                    Title="Delete" @onclick="@(() => RemoveCourtByOrder(c.Order))">
                                <Icon Name="IconName.TrashFill"/>
                            </Button>
                        </li>
                    }
                </ol>
            </CardBody>
        </Card>
    </div>

    <div class="col-lg-6">
        <Card Class="h-100 border-0 shadow-sm rounded-4 bg-secondary-subtle">
            <CardBody Class="text-center p-4">
                <CardTitle class="mb-3 fw-semibold text-secondary-emphasis">üßë‚Äçü§ù‚Äçüßë Players</CardTitle>

                <div class="d-flex justify-content-center">
                    <div class="input-group mb-3" style="max-width: 480px;">
                        <TextInput Placeholder="Player name"
                                   @bind-Value="NewPlayerName"
                                   OnInput="@((ChangeEventArgs e) => NewPlayerName = e?.Value?.ToString())"
                                   @onkeyup="@(e => OnEnterUp(e, AddPlayer))"/>

                        <Button Color="ButtonColor.Primary" @onclick="AddPlayer" Disabled="@NameExists(NewPlayerName)">Add</Button>
                    </div>
                </div>

                @if (NameExists(NewPlayerName))
                {
                    <div class="invalid-feedback d-block">Player name exists</div>
                }

                <ol class="list-unstyled mb-0 d-inline-block text-start w-100" style="max-width: 560px;">
                    @foreach (var p in Game.Players)
                    {
                        <li @key="p.Name" class="d-flex align-items-center py-2 border-bottom">
                            <span class="me-2 fw-medium">@p.Order.</span>

                            @if (p.IsEditing)
                            {
                                <div class="flex-grow-1 me-3">
                                    <TextInput Placeholder="Player name"
                                               @bind-Value="p.EditName"
                                               OnInput="@((ChangeEventArgs e) => p.EditName = e?.Value?.ToString())"
                                               @onkeyup="@(e => OnEnterUp(e, () => SavePlayer(p.Name)))"/>

                                    @if (NameExists(p.EditName, p))
                                    {
                                        <div class="invalid-feedback d-block">Player name exists</div>
                                    }
                                </div>

                                <Button Color="ButtonColor.Secondary" Class="me-2"
                                        Disabled="@NameExists(NewPlayerName)"
                                        Title="Save" @onclick="@(() => SavePlayer(p.Name))">
                                    <Icon Name="IconName.Check2"/>
                                </Button>
                                <Button Color="ButtonColor.Link" Class="me-3"
                                        Title="Cancel" @onclick="@(() => CancelEditPlayer(p.Name))">
                                    <Icon Name="IconName.XLg"/>
                                </Button>
                            }
                            else
                            {
                                <span class="flex-grow-1">@p.Name</span>

                                <Badge Color="BadgeColor.Secondary"
                                       IndicatorType="BadgeIndicatorType.RoundedPill"
                                       Class="me-3">
                                    PLAYER
                                </Badge>

                                <Button Color="ButtonColor.Link" Class="me-2"
                                        Title="Edit" @onclick="@(() => EditPlayer(p.Name))">
                                    <Icon Name="IconName.PencilSquare"/>
                                </Button>
                            }

                            <Button Color="ButtonColor.Link" Class="text-danger p-0"
                                    Title="Delete" @onclick="@(() => RemovePlayerById(p.Name))">
                                <Icon Name="IconName.TrashFill"/>
                            </Button>
                        </li>
                    }
                </ol>
                <CapacityAlert
                    CourtsCount="@Game.Courts.Count"
                    PlayersCount="@Game.Players.Count"
                    TeamFormat="@Game.TeamFormat"/>
            </CardBody>
        </Card>

    </div>
}
@{
    var roundMatches = CurrentRoundMatches().Where(x => !x.IsSkipper).ToList();
}
@if (ShowMatches && roundMatches.Any())
{
    <h1 style="text-align: center;">@(Game.FinalRound == Game.CurrentRound ? "Final Round" : $"Round {Game.CurrentRound}")</h1>
    <div class="row g-4 @CourtGridClasses(roundMatches.Count)">
        @foreach (var m in roundMatches)
        {
            <div class="col">
                <div class="text-center fw-semibold fs-4 mb-2">@m.CourtName</div>

                <div class="court">

                    <div class="court-grid">
                        <!-- TOP LEFT -->
                        <div class="grid-top-left">
                            @if (Game.TeamFormat == TeamFormat.Pairs)
                            {
                                <div class="pill pill-dark">@NameFor(m, m.Team1.Single())</div>
                            }
                            else
                            {
                                <div class="pill pill-dark pill-sm">@NameFor(m, m.Team1[0])</div>
                            }
                        </div>

                        <!-- TOP RIGHT -->
                        <div class="grid-top-right">
                            @if (Game.TeamFormat == TeamFormat.Pairs)
                            {
                                <div class="pill pill-dark">@NameFor(m, m.Team2.Single())</div>
                            }
                            else
                            {
                                <div class="stack">
                                    <div class="pill pill-dark pill-sm">@NameFor(m, m.Team2[0])</div>
                                </div>
                            }
                        </div>

                        <!-- MID (SCORES) -->
                        <div class="disc grid-mid-left"
                             role="button" tabindex="0"
                             @onclick="@(async () => await _scorePicker.ShowAsync(m, 1, Game.ToPoints))"
                             @onkeyup="@(async e => { if (e.Key == "Enter") {
                                           await _scorePicker.ShowAsync(m, 1, Game.ToPoints);
                                       } })">
                            @(m.Team1Points.HasValue ? m.Team1Points.Value.ToString() : "?")
                        </div>

                        <div class="disc grid-mid-right"
                             role="button" tabindex="0"
                             @onclick="@(async () => await _scorePicker.ShowAsync(m, 2, Game.ToPoints))"
                             @onkeyup="@(async e => { if (e.Key == "Enter") {
                                           await _scorePicker.ShowAsync(m, 2, Game.ToPoints);
                                       } })">
                            @(m.Team2Points.HasValue ? m.Team2Points.Value.ToString() : "?")
                        </div>

                        <!-- BOTTOM LEFT -->

                        @if (Game.TeamFormat == TeamFormat.Individual)
                        {
                            <div class="grid-bot-left">
                                @{
                                    <div class="stack">
                                        <div class="pill pill-dark pill-sm">@NameFor(m, m.Team1[1])</div>
                                    </div>
                                }
                            </div>

                            <!-- BOTTOM RIGHT -->
                            <div class="grid-bot-right">
                                @{
                                    <div class="stack">
                                        <div class="pill pill-dark pill-sm">@NameFor(m, m.Team2[1])</div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    @if (SkippingPlayers.Count > 0)
    {
        <div class="col-12">
            <div class="alert alert-warning d-flex align-items-center gap-2 mt-2 mb-0">
                <strong class="me-1">Players skipping round:</strong>
                <div class="d-flex flex-wrap gap-2">
                    @string.Join(", ", SkippingPlayers.Select(NameFor))
                </div>
            </div>
        </div>
    }
}

<div class="d-flex justify-content-center my-4 gap-2">


    @if (Game.CurrentRound == 0)
    {
        <Button Color="ButtonColor.Info" @onclick="ShowMatchHistory">
            üìñ Match History
        </Button>
    }

    @if (Game.Matches.Any())
    {
        <Button Color="ButtonColor.Secondary"
                Disabled="@(!CanGoBack)"
                @onclick="GoBackOneRound">
            ‚¨Ö Back
        </Button>
        <Button Color="ButtonColor.Secondary" @onclick="OpenHistory">üìú Leaderboard</Button>
    }

    @if (Game.CurrentRound != Game.FinalRound || Game.FinalRound == 0)
    {
        <Button Color="ButtonColor.Primary"
                Disabled="@(!CanGoNext)"
                @onclick="NextRoundAsync">
            ‚ñ∂ @(Game.CurrentRound == 0 ? "Play" : "Next")
        </Button>
    }

    @if (Game.CurrentRound > 0 && Game.CurrentRound != Game.FinalRound)
    {
        <Button Color="ButtonColor.Warning"
                Disabled="@(!CanGoFinal || !CanGoNext)"
                @onclick="FinalRoundAsync">
            üèÅ Final round
        </Button>
    }
    @if (Game.CurrentRound == Game.FinalRound && Game.FinalRound != 0)
     {
         <Button Color="ButtonColor.Danger" @onclick="ExitToStartAsync" Disabled="!Game.Matches
             .Where(m => m.Round == Game.CurrentRound && !m.IsSkipper)
             .All(m => m.Team1Points.HasValue && m.Team2Points.HasValue)">
             üö™ Exit
         </Button>
     }

</div>
</div>

</div>

<ScorePicker @ref="_scorePicker" OnPick="OnScorePicked" />
<HistoryModal @ref="_historyModal" Game="Game" />
<SavedGamesModal @ref="_savedGamesModalRef" OnLoadGame="LoadGameFromHistory" />
