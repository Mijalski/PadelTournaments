@using BlazorBootstrap
@using PadelTournamentManager.Models.Enums
@inject IJSRuntime Js

<Modal @ref="_modal" Title="Leaderboard" IsVerticallyCentered="true" Size="ModalSize.Regular">
    <HeaderTemplate>
        <div class="d-flex w-100 align-items-center">
            <div class="fw-semibold">Leaderboard</div>
        </div>
    </HeaderTemplate>

    <BodyTemplate>
        @if (Rows.Count == 0 || MaxRound == 0)
        {
            <div class="text-muted">No previous matches yet.</div>
        }
        else
        {
            <div class="history-wrap">
                <div class="table-responsive">
                    <table class="table table-sm table-hover table-striped align-middle mb-0 history-table">
                        <thead class="bg-header">
                            <tr>
                                <th class="col-pos">#</th>
                                <th>Player</th>

                                @for (var r = 1; r <= MaxRound; r++)
                                {
                                    <th class="text-center">Round @r</th>
                                }

                                <th class="text-end col-total">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in SortedRows)
                            {
                                <tr>
                                    <td class="text-muted">@row.Position</td>
                                    <td class="fw-medium">
                                        @if (row.Position == 1)
                                        {
                                            <span class="me-2" title="Leader">🏆</span>
                                        }

                                        <span class="@((row.Player.IsRemoved) ? "text-decoration-line-through text-muted" : "")">
                                            @row.Name
                                        </span>
                                        
                                        @if (Game.AllowRemovePlayers)
                                        {
                                            <Button Color="ButtonColor.Link"
                                                    Size="ButtonSize.Small"
                                                    Class="ms-2 text-danger"
                                                    Title="Remove player"
                                                    @onclick="@(() => ConfirmRemovePlayer(row.Player))">
                                                <Icon Name="IconName.Trash" />
                                            </Button>
                                        }
                                    </td>

                                    @for (var r = 1; r <= MaxRound; r++)
                                    {
                                        var pts = row.PointsByRound.GetValueOrDefault(r, 0);
                                        var isWin = row.WinsByRound.TryGetValue(r, out var w) && w;
                                        var isBye = row.ByeByRound.TryGetValue(r, out var b) && b;

                                        <td class="text-center font-mono @(isWin && !isBye ? "fw-bold" : null)">
                                            @if (pts == 0)
                                            {
                                                @pts
                                            }
                                            else if (isBye)
                                            {
                                                <span>(@pts)</span>
                                            }
                                            else
                                            {
                                                @pts
                                            }
                                        </td>
                                    }

                                    <td class="text-end">
                                        <span class="badge rounded-pill text-bg-primary px-3 py-2">@row.Total</span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </BodyTemplate>
</Modal>


@code {
    // Inputs
    [Parameter] public Game Game { get; set; }

    // Modal API
    private Modal _modal = default!;
    public async Task ShowAsync() { Rebuild(); await _modal.ShowAsync(); }
    public async Task Close() => await _modal.HideAsync();

    // View toggle
    enum ViewMode { Detailed, Summary }
    
    List<RowModel> Rows { get; set; } = [];
    int MaxRound { get; set; }

    IEnumerable<RowModel> SortedRows =>
        Game?.ResultSorting == ResultSorting.WinsOverPoints
            ? Rows.OrderByDescending(r => r.Wins)
                .ThenByDescending(r => r.Total)
                .ThenBy(r => r.Name)
                .Select((r, i) => { r.Position = i + 1; return r; })
            : Rows.OrderByDescending(r => r.Total)
                .ThenByDescending(r => r.Wins)
                .ThenBy(r => r.Name)
                .Select((r, i) => { r.Position = i + 1; return r; });

    void Rebuild()
    {
        Rows.Clear();
        MaxRound = Game.Matches.Any() ? Game.Matches.Max(m => m.Round) : 0;
        if (MaxRound == 0)
        {
            return;
        }

        // Filter out removed players
        var allPlayers = Game.Players.Where(p => !p.IsRemoved).ToList() ?? new();
        if (!allPlayers.Any())
        {
            allPlayers = Game.Matches
                .SelectMany(m => m.Team1.Concat(m.Team2))
                .Distinct()
                .Where(p => !p.IsRemoved)
                .ToList();
        }

        var map = new Dictionary<Player, RowModel>();
        foreach (var p in allPlayers)
            map[p] = new RowModel { Name = p.Name, Player = p };

        foreach (var m in Game.Matches)
        {
            var isByeMatch = string.Equals(m.CourtName, "BYE", StringComparison.OrdinalIgnoreCase) || m.Team2.Count == 0;

            if (!isByeMatch)
            {
                var t1Win = m.Team1Points > m.Team2Points;
                var t2Win = m.Team2Points > m.Team1Points;

                foreach (var p in m.Team1)
                {
                    if (p.IsRemoved) continue;
                    if (!map.TryGetValue(p, out var row)) { row = new RowModel { Name = p.Name, Player = p }; map[p] = row; }
                    AddRound(row, m.Round, m.Team1Points ?? 0, t1Win, isBye: false);
                }

                foreach (var p in m.Team2)
                {
                    if (p.IsRemoved) continue;
                    if (!map.TryGetValue(p, out var row)) { row = new RowModel { Name = p.Name, Player = p }; map[p] = row; }
                    AddRound(row, m.Round, m.Team2Points ?? 0, t2Win, isBye: false);
                }
            }
            else
            {
                foreach (var p in m.Team1)
                {
                    if (p.IsRemoved) continue;
                    if (!map.TryGetValue(p, out var row)) { row = new RowModel { Name = p.Name, Player = p }; map[p] = row; }
                    AddRound(row, m.Round, m.Team1Points ?? 0, win: false, isBye: true);
                }
            }
        }

        Rows = map.Values.ToList();

        if (Game?.ResultSorting == ResultSorting.WinsOverPoints)
        {
            Rows = Rows.OrderByDescending(r => r.Wins)
                .ThenByDescending(r => r.Total)
                .ToList();
        }
        else if (Game?.ResultSorting == ResultSorting.PointsOverWins)
        {
            Rows = Rows.OrderByDescending(r => r.Total)
                .ThenByDescending(r => r.Wins)
                .ToList();
        }

        for (var i = 0; i < Rows.Count; i++)
            Rows[i].Position = i + 1;
    }


    static void AddRound(RowModel row, int round, int pts, bool win, bool isBye)
    {
        row.PointsByRound[round] = pts;
        row.WinsByRound[round] = win;
        row.ByeByRound[round] = isBye;
        row.Total += pts;
        if (win)
        {
            row.Wins += 1;
        }
    }

    private async Task ConfirmRemovePlayer(Player p)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"Are you sure you want to remove '{p.Name}'?");
        if (confirmed)
        {
            p.IsRemoved = true;
            Rebuild();
        }
    }
}
